{"version":3,"file":"uml-editor.min.js","sources":["../src/uml-editor.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { decodeDiagram, encodeDiagram } from 'qtype_uml/uml-editor-compression';\nimport { emitDiagramDataChangedEvent } from 'qtype_uml/uml-editor-change-handler';\n\nconst templateHTML = `\n<style>\n    :host {\n        display: flex;\n        flex-direction: row;\n        height: 100%;\n        width: 100%;\n        gap: 2px;\n        padding: 4px;\n    }\n    \n    .left {\n        width: 30%;\n        background-color: grey;\n    }\n    \n    .right {\n        width: 100%;\n        background-color: grey;\n    }\n</style>\n    \n<div class=\"left\">\n    <canvas id=\"canvasTool\"></canvas>\n</div>\n<div class=\"right\">\n    <canvas id=\"canvasEditor\"></canvas>\n</div>\n`;\n\nexport class UmlEditor extends HTMLElement {\n    canvasEditor = null;\n    ctxEditor = null;\n\n    canvasTool = null;\n    ctxTool = null;\n\n    offsetX = 0;\n    offsetY = 0;\n    draggedObject = null;\n\n    objects = [];\n\n    get attributeInputId() {\n        return this.getAttribute('inputId');\n    }\n\n    get attributeDiagram() {\n        const diagram = this.getAttribute('diagram');\n        if (!diagram) {\n            return null;\n        }\n\n        return decodeDiagram(diagram);\n    }\n\n    get attributeAllowEdit() {\n        return this.getAttribute('allowEdit') === '1';\n    }\n\n    constructor() {\n        super();\n        this.attachShadow({mode: 'open'});\n\n        // Create the template for the shadow DOM\n        this.shadowRoot.innerHTML = templateHTML;\n    }\n\n    connectedCallback() {\n        // Initialize canvas elements and contexts\n        this.initCanvas('canvasEditor', 'ctxEditor');\n        this.initCanvas('canvasTool', 'ctxTool');\n\n        if (this.attributeAllowEdit) {\n            // Initial rendering\n            this.drawObjectTool();\n\n            // Setup event listeners\n            this.setupListeners();\n        } else {\n            // Hide toolbox (left part)\n            this.shadowRoot.querySelector('.left').style.display = 'none';\n        }\n\n        const diagramFromAttribute = this.attributeDiagram;\n        if (diagramFromAttribute) {\n            this.displayDiagramSchema(diagramFromAttribute);\n        }\n    }\n\n    detachedCallback() {\n        this.emitDiagramChanged();\n    }\n\n    initCanvas(canvasId, contextId) {\n        const canvas = this.shadowRoot.getElementById(canvasId);\n        const context = canvas.getContext('2d');\n\n        canvas.width = canvas.parentElement.clientWidth;\n        canvas.height = canvas.parentElement.clientHeight;\n\n        this[canvasId] = canvas;\n        this[contextId] = context;\n    }\n\n    displayDiagramSchema(diagramObjects) {\n        if (diagramObjects) {\n            this.objects = diagramObjects;\n            this.drawObjectEditor();\n        }\n    }\n\n    drawObjectEditor() {\n        // Clear the editor canvas and draw objects\n        this.ctxEditor.clearRect(0, 0, this.canvasEditor.width, this.canvasEditor.height);\n        for (const obj of this.objects) {\n            this.ctxEditor.fillStyle = obj.color;\n            this.ctxEditor.fillRect(obj.x, obj.y, obj.width, obj.height);\n        }\n    }\n\n    drawObjectTool() {\n        // Clear the tool canvas and draw a sample object\n        this.ctxTool.clearRect(0, 0, this.canvasTool.width, this.canvasTool.height);\n        this.ctxTool.fillStyle = 'blue';\n        this.ctxTool.fillRect(100, 100, 50, 50);\n    }\n\n    findTopObject(x, y) {\n        // Find the top object at the given coordinates\n        for (let i = this.objects.length - 1; i >= 0; i--) {\n            const obj = this.objects[i];\n            if (x >= obj.x && x <= obj.x + obj.width && y >= obj.y && y <= obj.y + obj.height) {\n                return obj;\n            }\n        }\n        return null; // No object found\n    }\n\n    setupListeners() {\n        // Save dragged object\n        this.canvasEditor.addEventListener('mousedown', (event) => {\n            const x = event.clientX - this.canvasEditor.getBoundingClientRect().left;\n            const y = event.clientY - this.canvasEditor.getBoundingClientRect().top;\n\n            this.draggedObject = this.findTopObject(x, y);\n\n            if (this.draggedObject) {\n                this.offsetX = x - this.draggedObject.x;\n                this.offsetY = y - this.draggedObject.y;\n            }\n        });\n\n        // Refresh Editor for every mousemove\n        this.canvasEditor.addEventListener('mousemove', (event) => {\n            if (this.draggedObject) {\n                const x = event.clientX - this.canvasEditor.getBoundingClientRect().left;\n                const y = event.clientY - this.canvasEditor.getBoundingClientRect().top;\n                this.draggedObject.x = x - this.offsetX;\n                this.draggedObject.y = y - this.offsetY;\n                this.objects[this.draggedObject.id - 1] = this.draggedObject;\n\n                this.emitDiagramChanged();\n                this.drawObjectEditor();\n            }\n        });\n\n        // Save location of dragged object\n        this.canvasEditor.addEventListener('mouseup', () => {\n            if (this.draggedObject) {\n                this.objects[this.draggedObject.id - 1] = this.draggedObject;\n                this.draggedObject = null;\n            }\n        });\n\n        // Draw an instance of a click object (in Toolbox) on the editor\n        this.canvasTool.addEventListener('click', (event) => {\n            event.preventDefault();\n            const obj = {\n                id: this.objects.length + 1,\n                x: 100,\n                y: 100,\n                width: 50,\n                height: 50,\n                color: 'blue',\n            };\n            this.objects.push(obj);\n\n            this.emitDiagramChanged();\n            this.drawObjectEditor();\n        });\n    }\n\n    emitDiagramChanged() {\n        const diagram = encodeDiagram(this.objects);\n        emitDiagramDataChangedEvent(this.attributeInputId, diagram);\n    }\n}\n"],"names":["UmlEditor","HTMLElement","attributeInputId","this","getAttribute","attributeDiagram","diagram","attributeAllowEdit","constructor","attachShadow","mode","shadowRoot","innerHTML","connectedCallback","initCanvas","drawObjectTool","setupListeners","querySelector","style","display","diagramFromAttribute","displayDiagramSchema","detachedCallback","emitDiagramChanged","canvasId","contextId","canvas","getElementById","context","getContext","width","parentElement","clientWidth","height","clientHeight","diagramObjects","objects","drawObjectEditor","ctxEditor","clearRect","canvasEditor","obj","fillStyle","color","fillRect","x","y","ctxTool","canvasTool","findTopObject","i","length","addEventListener","event","clientX","getBoundingClientRect","left","clientY","top","draggedObject","offsetX","offsetY","id","preventDefault","push"],"mappings":"ibAgDaA,kBAAkBC,YAavBC,8BACOC,KAAKC,aAAa,WAGzBC,6BACMC,QAAUH,KAAKC,aAAa,kBAC7BE,SAIE,uCAAcA,SAHV,KAMXC,+BAC0C,MAAnCJ,KAAKC,aAAa,aAG7BI,0DA7Be,uCACH,wCAEC,qCACH,qCAEA,kCACA,wCACM,qCAEN,SAqBDC,aAAa,CAACC,KAAM,cAGpBC,WAAWC,ofAGpBC,yBAESC,WAAW,eAAgB,kBAC3BA,WAAW,aAAc,WAE1BX,KAAKI,yBAEAQ,sBAGAC,uBAGAL,WAAWM,cAAc,SAASC,MAAMC,QAAU,aAGrDC,qBAAuBjB,KAAKE,iBAC9Be,2BACKC,qBAAqBD,sBAIlCE,wBACSC,qBAGTT,WAAWU,SAAUC,iBACXC,OAASvB,KAAKQ,WAAWgB,eAAeH,UACxCI,QAAUF,OAAOG,WAAW,MAElCH,OAAOI,MAAQJ,OAAOK,cAAcC,YACpCN,OAAOO,OAASP,OAAOK,cAAcG,kBAEhCV,UAAYE,YACZD,WAAaG,QAGtBP,qBAAqBc,gBACbA,sBACKC,QAAUD,oBACVE,oBAIbA,wBAESC,UAAUC,UAAU,EAAG,EAAGpC,KAAKqC,aAAaV,MAAO3B,KAAKqC,aAAaP,YACrE,MAAMQ,OAAOtC,KAAKiC,aACdE,UAAUI,UAAYD,IAAIE,WAC1BL,UAAUM,SAASH,IAAII,EAAGJ,IAAIK,EAAGL,IAAIX,MAAOW,IAAIR,QAI7DlB,sBAESgC,QAAQR,UAAU,EAAG,EAAGpC,KAAK6C,WAAWlB,MAAO3B,KAAK6C,WAAWf,aAC/Dc,QAAQL,UAAY,YACpBK,QAAQH,SAAS,IAAK,IAAK,GAAI,IAGxCK,cAAcJ,EAAGC,OAER,IAAII,EAAI/C,KAAKiC,QAAQe,OAAS,EAAGD,GAAK,EAAGA,IAAK,OACzCT,IAAMtC,KAAKiC,QAAQc,MACrBL,GAAKJ,IAAII,GAAKA,GAAKJ,IAAII,EAAIJ,IAAIX,OAASgB,GAAKL,IAAIK,GAAKA,GAAKL,IAAIK,EAAIL,IAAIR,cAChEQ,WAGR,KAGXzB,sBAESwB,aAAaY,iBAAiB,aAAcC,cACvCR,EAAIQ,MAAMC,QAAUnD,KAAKqC,aAAae,wBAAwBC,KAC9DV,EAAIO,MAAMI,QAAUtD,KAAKqC,aAAae,wBAAwBG,SAE/DC,cAAgBxD,KAAK8C,cAAcJ,EAAGC,GAEvC3C,KAAKwD,qBACAC,QAAUf,EAAI1C,KAAKwD,cAAcd,OACjCgB,QAAUf,EAAI3C,KAAKwD,cAAcb,WAKzCN,aAAaY,iBAAiB,aAAcC,WACzClD,KAAKwD,cAAe,OACdd,EAAIQ,MAAMC,QAAUnD,KAAKqC,aAAae,wBAAwBC,KAC9DV,EAAIO,MAAMI,QAAUtD,KAAKqC,aAAae,wBAAwBG,SAC/DC,cAAcd,EAAIA,EAAI1C,KAAKyD,aAC3BD,cAAcb,EAAIA,EAAI3C,KAAK0D,aAC3BzB,QAAQjC,KAAKwD,cAAcG,GAAK,GAAK3D,KAAKwD,mBAE1CpC,0BACAc,4BAKRG,aAAaY,iBAAiB,WAAW,KACtCjD,KAAKwD,qBACAvB,QAAQjC,KAAKwD,cAAcG,GAAK,GAAK3D,KAAKwD,mBAC1CA,cAAgB,cAKxBX,WAAWI,iBAAiB,SAAUC,QACvCA,MAAMU,uBACAtB,IAAM,CACRqB,GAAI3D,KAAKiC,QAAQe,OAAS,EAC1BN,EAAG,IACHC,EAAG,IACHhB,MAAO,GACPG,OAAQ,GACRU,MAAO,aAENP,QAAQ4B,KAAKvB,UAEblB,0BACAc,sBAIbd,2BACUjB,SAAU,uCAAcH,KAAKiC,iEACPjC,KAAKD,iBAAkBI"}