{"version":3,"file":"uml-editor.min.js","sources":["../src/uml-editor.js"],"sourcesContent":["/* eslint-disable */\n// This file is part of Moodle - https://moodle.org\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\nimport {decodeDiagram, encodeDiagram} from 'qtype_uml/uml-editor-compression';\nimport {emitDiagramDataChangedEvent} from 'qtype_uml/uml-editor-change-handler';\nimport {UMLActor} from 'qtype_uml/Elements/UMLActor';\nimport {UMLClass} from 'qtype_uml/Elements/UMLClass';\n\nconst templateCode = `\n    <style>\n        :host {\n            display: flex;\n            flex-direction: row;\n            height: 100%;\n            width: 100%;\n            gap: 2px;\n            padding: 4px;\n        }\n        \n        .left {\n            width: 30%;\n            background-color: grey;\n        }\n        \n        .right {\n            width: 100%;\n        }\n    \n        #editor {\n            width: 100%;\n            height: 100%;\n            border: 1px solid #ccc;\n        }\n    </style>\n    \n    <div class=\"left\">\n        <div id=\"toolBox\"></div>\n    </div>\n    <div class=\"right\">\n        <div id=\"editor\"></div>\n    </div>\n    `;\n\nexport class UmlEditor extends HTMLElement {\n    get attributeInputId() {\n        return this.getAttribute('inputId');\n    }\n\n    get attributeDiagram() {\n        const diagram = this.getAttribute('diagram');\n        if (!diagram) {\n            return null;\n        }\n\n        return decodeDiagram(diagram);\n    }\n\n    get attributeAllowEdit() {\n        return this.getAttribute('allowEdit') === '1';\n    }\n\n    constructor() {\n        super();\n        this.attachShadow({mode: 'open'});\n\n        // Create the template for the shadow DOM\n        this.shadowRoot.innerHTML = templateCode;\n\n        // Create the JointJS diagram\n        const editorDiv = this.shadowRoot.querySelector('#editor');\n        const toolBoxDiv = this.shadowRoot.querySelector('#toolBox');\n\n        // Create  instance of  JointJS graph\n        const graphEditor = new joint.dia.Graph();\n        const graphToolBox = new joint.dia.Graph();\n\n        const paperEditor = initPaper(editorDiv, graphEditor, true);\n        const paperToolbox = initPaper(toolBoxDiv, graphToolBox, false);\n\n        //const ChildHighlighterView = joint.dia.Highlighter.extend({});\n\n        initToolBoxClasses();\n\n        // Initialize with existing diagram if given\n        const diagramFromAttribute = this.attributeDiagram;\n        if (diagramFromAttribute) {\n            this.displayDiagramSchema(diagramFromAttribute);\n        }\n\n        /** Events */\n        paperToolbox.on('element:pointerup', (cellView, evt, x, y) => {\n            const clickedClass = cellView.model.clone();\n            let tmpX = Math.floor(Math.random() * (500 - 20 + 1)) + 20;\n            let tmpY = Math.floor(Math.random() * (500 - 20 + 1)) + 20;\n            clickedClass.position(tmpX, tmpY);\n            graphEditor.addCell(clickedClass);\n        });\n\n        // Assuming paper is your JointJS paper\n\n        paperEditor.on('cell:mouseenter', function (cellView) {\n            const tools = new joint.dia.ToolsView({\n                tools: [\n                    new joint.elementTools.Boundary({\n                        padding: 3,\n                        rotate: true,\n                        useModelGeometry: true,\n                    }),\n                    new joint.linkTools.Remove({\n                        scale: 1.2,\n                        distance: 15\n                    })\n                ]\n            });\n            cellView.addTools(tools);\n        });\n\n        paperEditor.on('element:pointerdblclick', function (elementView, evt) {\n\n            const header = 'headerText';\n            const variablesRect = 'variablesRect';\n            const functionsRect = 'functionsRect';\n            const selectedRect = evt.target.attributes[0].value;\n\n\n            switch (selectedRect) {\n                case header:\n                    console.log('Header section double-clicked');\n                    break;\n                case variablesRect:\n\n                    const variables = ['test'];\n                    let rectWidth = 150; // Width of the class\n                    let rectHeight = 100; // Height of the class\n                    let headerHeight = 20; // Height of the header section\n                    let sectionHeight = (rectHeight - headerHeight) / 2; // Height of each section\n\n                    elementView.model.updateView();\n\n\n                    // Render variables\n                    let variableYCounter = 0;\n                    const position = elementView.model.position();\n\n                    // Create and position components for each variable entry\n                    let variableComponent = new joint.shapes.standard.TextBlock({\n                        position: {x: position.x, y: position.y + headerHeight + elementView.model.getcounterVariables()},\n                        size: {width: rectWidth, height: 20},\n                        text: 'Sample Text', // Text content for the block\n                        fill: 'black', // Color of the text\n                        fontSize: 10, // Font size of the text\n                        fontFamily: 'Arial, helvetica, sans-serif', // Font family\n                        'ref-y': headerHeight, // Vertical position within the section\n                        'ref-x': 0,\n                        ref: 'variablesRect', // Reference to the parent rectangle (change this as needed)\n                        'text-anchor': 'middle', // Text alignment\n                        'pointer-events': 'none' // To avoid the text block from intercepting events\n                    });\n\n\n                    var currentAttributes = elementView.model.attr();\n                    currentAttributes.body2 = variableComponent;\n                    elementView.model.embed(variableComponent);\n\n                    // console.log(elementView.model);\n\n\n                    //elementView.model.embed(r2)\n                    graphEditor.addCell(variableComponent);\n                    variableYCounter += 20; // Adjust as needed for spacing\n                    elementView.model.counterVariablesUp();\n\n\n                    break;\n                case functionsRect:\n                    console.log('Functions section double-clicked');\n                    break;\n                default:\n                    console.log('Clicked outside the sections');\n                    break;\n            }\n        });\n\n        paperEditor.on('cell:mouseleave', function (cellView) {\n            cellView.removeTools();\n        });\n\n        paperEditor.on('cell:pointerup', (cellView, evt, x, y) => {\n\n            /*if (this.from) {\n                // If 'from' is set (meaning a previous element was selected), create a link\n                const link = new joint.shapes.standard.Link({\n                    source: { id: this.from.id },\n                    target: { id: cellView.model.id },\n                    attrs: {\n                        // Define link styles here if needed\n                    }\n                });\n                graphEditor.addCell(link);\n                this.from = null; // Reset 'from' to enable selecting a new 'from' element\n            } else {\n                // Set the 'from' element upon the first click\n                this.from = cellView.model;\n\n            }*/\n        });\n\n        function initToolBoxClasses() {\n            const customActor = new UMLActor();\n            const class1 = new UMLClass();\n            customActor.position(20, 120);\n            class1.position(20, 20);\n\n            graphToolBox.addCell(customActor);\n            graphToolBox.addCell(class1);\n\n        }\n\n\n        function initPaper(el, model, isInteractive) {\n            return new joint.dia.Paper({\n                el: el,\n                model: model,\n                width: '100%',\n                height: '100%',\n                gridSize: 10,\n                drawGrid: true,\n                interactive: isInteractive\n            });\n        }\n    }\n\n    emitDiagramChanged() {\n        const diagram = encodeDiagram(this.objects);\n        emitDiagramDataChangedEvent(this.attributeInputId, diagram);\n    }\n}\n"],"names":["UmlEditor","HTMLElement","attributeInputId","this","getAttribute","attributeDiagram","diagram","attributeAllowEdit","constructor","attachShadow","mode","shadowRoot","innerHTML","editorDiv","querySelector","toolBoxDiv","graphEditor","joint","dia","Graph","graphToolBox","paperEditor","initPaper","paperToolbox","customActor","UMLActor","class1","UMLClass","position","addCell","initToolBoxClasses","diagramFromAttribute","el","model","isInteractive","Paper","width","height","gridSize","drawGrid","interactive","displayDiagramSchema","on","cellView","evt","x","y","clickedClass","clone","tmpX","Math","floor","random","tmpY","tools","ToolsView","elementTools","Boundary","padding","rotate","useModelGeometry","linkTools","Remove","scale","distance","addTools","elementView","target","attributes","value","console","log","rectWidth","headerHeight","updateView","variableYCounter","variableComponent","shapes","standard","TextBlock","getcounterVariables","size","text","fill","fontSize","fontFamily","ref","attr","body2","embed","counterVariablesUp","removeTools","emitDiagramChanged","objects"],"mappings":"6VAuDaA,kBAAkBC,YACvBC,8BACOC,KAAKC,aAAa,WAGzBC,6BACMC,QAAUH,KAAKC,aAAa,kBAC7BE,SAIE,uCAAcA,SAHV,KAMXC,+BAC0C,MAAnCJ,KAAKC,aAAa,aAG7BI,2BAESC,aAAa,CAACC,KAAM,cAGpBC,WAAWC,0qBAGVC,UAAYV,KAAKQ,WAAWG,cAAc,WAC1CC,WAAaZ,KAAKQ,WAAWG,cAAc,YAG3CE,YAAc,IAAIC,MAAMC,IAAIC,MAC5BC,aAAe,IAAIH,MAAMC,IAAIC,MAE7BE,YAAcC,UAAUT,UAAWG,aAAa,GAChDO,aAAeD,UAAUP,WAAYK,cAAc,qBAmI/CI,YAAc,IAAIC,mBAClBC,OAAS,IAAIC,mBACnBH,YAAYI,SAAS,GAAI,KACzBF,OAAOE,SAAS,GAAI,IAEpBR,aAAaS,QAAQL,aACrBJ,aAAaS,QAAQH,QArIzBI,SAGMC,qBAAuB5B,KAAKE,0BAuIzBiB,UAAUU,GAAIC,MAAOC,sBACnB,IAAIjB,MAAMC,IAAIiB,MAAM,CACvBH,GAAIA,GACJC,MAAOA,MACPG,MAAO,OACPC,OAAQ,OACRC,SAAU,GACVC,UAAU,EACVC,YAAaN,gBA9IjBH,2BACKU,qBAAqBV,sBAI9BR,aAAamB,GAAG,qBAAqB,CAACC,SAAUC,IAAKC,EAAGC,WAC9CC,aAAeJ,SAASV,MAAMe,YAChCC,KAAOC,KAAKC,UAAMD,KAAKE,UAA6B,GACpDC,KAAOH,KAAKC,UAAMD,KAAKE,UAA6B,GACxDL,aAAanB,SAASqB,KAAMI,MAC5BrC,YAAYa,QAAQkB,iBAKxB1B,YAAYqB,GAAG,mBAAmB,SAAUC,gBAClCW,MAAQ,IAAIrC,MAAMC,IAAIqC,UAAU,CAClCD,MAAO,CACH,IAAIrC,MAAMuC,aAAaC,SAAS,CAC5BC,QAAS,EACTC,QAAQ,EACRC,kBAAkB,IAEtB,IAAI3C,MAAM4C,UAAUC,OAAO,CACvBC,MAAO,IACPC,SAAU,QAItBrB,SAASsB,SAASX,UAGtBjC,YAAYqB,GAAG,2BAA2B,SAAUwB,YAAatB,YAKxCA,IAAIuB,OAAOC,WAAW,GAAGC,WAH/B,aAQPC,QAAQC,IAAI,2CAPE,oBAYVC,UAAY,IAEZC,aAAe,GAGnBP,YAAYjC,MAAMyC,iBAIdC,iBAAmB,QACjB/C,SAAWsC,YAAYjC,MAAML,eAG/BgD,kBAAoB,IAAI3D,MAAM4D,OAAOC,SAASC,UAAU,CACxDnD,SAAU,CAACiB,EAAGjB,SAASiB,EAAGC,EAAGlB,SAASkB,EAAI2B,aAAeP,YAAYjC,MAAM+C,uBAC3EC,KAAM,CAAC7C,MAAOoC,UAAWnC,OAAQ,IACjC6C,KAAM,cACNC,KAAM,QACNC,SAAU,GACVC,WAAY,uCACHZ,qBACA,EACTa,IAAK,8BACU,0BACG,SAIEpB,YAAYjC,MAAMsD,OACxBC,MAAQZ,kBAC1BV,YAAYjC,MAAMwD,MAAMb,mBAMxB5D,YAAYa,QAAQ+C,mBACpBD,kBAAoB,GACpBT,YAAYjC,MAAMyD,+BAjDJ,gBAsDdpB,QAAQC,IAAI,kDAGZD,QAAQC,IAAI,oCAKxBlD,YAAYqB,GAAG,mBAAmB,SAAUC,UACxCA,SAASgD,iBAGbtE,YAAYqB,GAAG,kBAAkB,CAACC,SAAUC,IAAKC,EAAGC,SA6CxD8C,2BACUtF,SAAU,uCAAcH,KAAK0F,iEACP1F,KAAKD,iBAAkBI"}