{"version":3,"file":"loader.min.js","sources":["../src/loader.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Set the diagram to the reference input field.\n *\n * @param {Event} event the custom event (fired by the editor)\n */\nfunction setDiagramToReferenceInputField(event) {\n    const element = document.getElementById(event.detail?.inputId);\n    if (element) {\n        element.value = event.detail.diagram;\n    }\n}\n\n/**\n * Initialize the uml editor elements.\n *\n * @param {String} basePath path to the dist folder of the uml-element\n */\n// Eslint-disable-next-line no-unused-vars\nexport const init = (basePath) => {\n    // Create script and style tag for custom elements\n    const mainScript = document.createElement('script');\n    mainScript.src = `${basePath}/main.js`;\n    mainScript.type = 'module';\n    mainScript.defer = true;\n\n    const mainStyle = document.createElement('link');\n    mainStyle.href = `${basePath}/styles.css`;\n    mainStyle.rel = 'stylesheet';\n\n    // Used for angular initialization\n    const umlEditorLoader = document.createElement('uml-elements');\n    document.body.appendChild(umlEditorLoader);\n\n    // Load script and style tag for custom elements\n    document.head.appendChild(mainScript);\n    document.head.appendChild(mainStyle);\n\n    // Listen for dom changes to detect when the editor is loaded\n    const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n            mutation.addedNodes.forEach((node) => {\n                if (node.nodeName === 'UML-EDITOR') {\n                    node.addEventListener('diagramChanged', setDiagramToReferenceInputField);\n                }\n            });\n        });\n    });\n\n    observer.observe(document.body, {childList: true, subtree: true});\n};"],"names":["setDiagramToReferenceInputField","event","element","document","getElementById","detail","_event$detail","inputId","value","diagram","basePath","mainScript","createElement","src","type","defer","mainStyle","href","rel","umlEditorLoader","body","appendChild","head","MutationObserver","mutations","forEach","mutation","addedNodes","node","nodeName","addEventListener","observe","childList","subtree"],"mappings":"mEAoBSA,gCAAgCC,+BAC/BC,QAAUC,SAASC,qCAAeH,MAAMI,uCAANC,cAAcC,SAClDL,UACAA,QAAQM,MAAQP,MAAMI,OAAOI,oGAUhBC,iBAEXC,WAAaR,SAASS,cAAc,UAC1CD,WAAWE,cAASH,qBACpBC,WAAWG,KAAO,SAClBH,WAAWI,OAAQ,QAEbC,UAAYb,SAASS,cAAc,QACzCI,UAAUC,eAAUP,wBACpBM,UAAUE,IAAM,mBAGVC,gBAAkBhB,SAASS,cAAc,gBAC/CT,SAASiB,KAAKC,YAAYF,iBAG1BhB,SAASmB,KAAKD,YAAYV,YAC1BR,SAASmB,KAAKD,YAAYL,WAGT,IAAIO,kBAAkBC,YACnCA,UAAUC,SAASC,WACfA,SAASC,WAAWF,SAASG,OACH,eAAlBA,KAAKC,UACLD,KAAKE,iBAAiB,iBAAkB9B,0CAM/C+B,QAAQ5B,SAASiB,KAAM,CAACY,WAAW,EAAMC,SAAS"}