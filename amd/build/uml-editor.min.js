define("qtype_uml/uml-editor",["exports","./uml-editor-compression.js"],(function(_exports,_umlEditorCompression){function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.UmlEditor=void 0;class UmlEditor extends HTMLElement{get attributeInputId(){return this.getAttribute("inputId")}get attributeDiagram(){const diagram=this.getAttribute("diagram");return(0,_umlEditorCompression.decodeDiagram)(diagram)}get attributeAllowEdit(){return"1"===this.getAttribute("allowEdit")}constructor(){super(),_defineProperty(this,"canvasEditor",null),_defineProperty(this,"ctxEditor",null),_defineProperty(this,"canvasTool",null),_defineProperty(this,"ctxTool",null),_defineProperty(this,"offsetX",0),_defineProperty(this,"offsetY",0),_defineProperty(this,"draggedObject",null),_defineProperty(this,"objects",[]),_defineProperty(this,"eventBuffer",[]),_defineProperty(this,"bufferTimeout",null),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n<style>\n    :host {\n        display: flex;\n        flex-direction: row;\n        height: 100%;\n        width: 100%;\n        gap: 2px;\n        padding: 4px;\n    }\n    \n    .left {\n        width: 30%;\n        background-color: grey;\n    }\n    \n    .right {\n        width: 100%;\n        background-color: grey;\n    }\n</style>\n    \n<div class="left">\n    <canvas id="canvasTool"></canvas>\n</div>\n<div class="right">\n    <canvas id="canvasEditor"></canvas>\n</div>\n'}connectedCallback(){this.initCanvas("canvasEditor","ctxEditor"),this.initCanvas("canvasTool","ctxTool"),this.attributeAllowEdit?(this.drawObjectTool(),this.setupListeners()):this.shadowRoot.querySelector(".left").style.display="none",this.displayDiagramSchema(this.attributeDiagram)}detachedCallback(){this.emitDiagramChanged()}initCanvas(canvasId,contextId){const canvas=this.shadowRoot.getElementById(canvasId),context=canvas.getContext("2d");canvas.width=canvas.parentElement.clientWidth,canvas.height=canvas.parentElement.clientHeight,this[canvasId]=canvas,this[contextId]=context}displayDiagramSchema(diagramObjects){diagramObjects&&(this.objects=diagramObjects,this.drawObjectEditor())}emitDiagramChanged(){const diagram=(0,_umlEditorCompression.encodeDiagram)(this.objects),event=new CustomEvent("diagramChanged",{bubbles:!0,detail:{inputId:this.attributeInputId,diagram:diagram}});this.eventBuffer.push(event),this.bufferTimeout&&clearTimeout(this.bufferTimeout),this.bufferTimeout=setTimeout((()=>{this.dispatchEvent(this.eventBuffer[this.eventBuffer.length-1]),this.eventBuffer.splice(0,this.eventBuffer.length),this.bufferTimeout=null}),100)}drawObjectEditor(){this.ctxEditor.clearRect(0,0,this.canvasEditor.width,this.canvasEditor.height);for(const obj of this.objects)this.ctxEditor.fillStyle=obj.color,this.ctxEditor.fillRect(obj.x,obj.y,obj.width,obj.height)}drawObjectTool(){this.ctxTool.clearRect(0,0,this.canvasTool.width,this.canvasTool.height),this.ctxTool.fillStyle="blue",this.ctxTool.fillRect(100,100,50,50)}findTopObject(x,y){for(let i=this.objects.length-1;i>=0;i--){const obj=this.objects[i];if(x>=obj.x&&x<=obj.x+obj.width&&y>=obj.y&&y<=obj.y+obj.height)return obj}return null}setupListeners(){this.canvasEditor.addEventListener("mousedown",(event=>{const x=event.clientX-this.canvasEditor.getBoundingClientRect().left,y=event.clientY-this.canvasEditor.getBoundingClientRect().top;this.draggedObject=this.findTopObject(x,y),this.draggedObject&&(this.offsetX=x-this.draggedObject.x,this.offsetY=y-this.draggedObject.y)})),this.canvasEditor.addEventListener("mousemove",(event=>{if(this.draggedObject){const x=event.clientX-this.canvasEditor.getBoundingClientRect().left,y=event.clientY-this.canvasEditor.getBoundingClientRect().top;this.draggedObject.x=x-this.offsetX,this.draggedObject.y=y-this.offsetY,this.objects[this.draggedObject.id-1]=this.draggedObject,this.emitDiagramChanged(),this.drawObjectEditor()}})),this.canvasEditor.addEventListener("mouseup",(()=>{this.draggedObject&&(this.objects[this.draggedObject.id-1]=this.draggedObject,this.draggedObject=null)})),this.canvasTool.addEventListener("click",(event=>{event.preventDefault();const obj={id:this.objects.length+1,x:100,y:100,width:50,height:50,color:"blue"};this.objects.push(obj),this.emitDiagramChanged(),this.drawObjectEditor()}))}}_exports.UmlEditor=UmlEditor}));

//# sourceMappingURL=uml-editor.min.js.map